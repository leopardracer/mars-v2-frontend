// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  OracleBaseForString,
  ParamsBaseForString,
  Decimal,
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  Uint128,
  ActionKind,
  SignedUint,
  PerpParams,
  QueryMsg,
  ConfigForString,
  Accounting,
  Balance,
  CashFlow,
  PnlAmounts,
  DenomStateResponse,
  Funding,
  SignedDecimal,
  ArrayOfDenomStateResponse,
  PerpVaultDeposit,
  TradingFee,
  Coin,
  OwnerResponse,
  PerpDenomState,
  PnlValues,
  PaginationResponseForPerpDenomState,
  Metadata,
  NullablePerpVaultPosition,
  PerpVaultPosition,
  PerpVaultUnlock,
  PositionResponse,
  PerpPosition,
  PositionFeesResponse,
  ArrayOfPositionResponse,
  PositionsByAccountResponse,
  ArrayOfPerpVaultUnlock,
  VaultResponse,
} from './MarsPerps.types'
export interface MarsPerpsReadOnlyInterface {
  contractAddress: string
  owner: () => Promise<OwnerResponse>
  config: () => Promise<ConfigForString>
  vault: ({ action }: { action?: ActionKind }) => Promise<VaultResponse>
  denomState: ({ denom }: { denom: string }) => Promise<DenomStateResponse>
  perpDenomState: ({
    action,
    denom,
  }: {
    action: ActionKind
    denom: string
  }) => Promise<PerpDenomState>
  perpDenomStates: ({
    action,
    limit,
    startAfter,
  }: {
    action: ActionKind
    limit?: number
    startAfter?: string
  }) => Promise<PaginationResponseForPerpDenomState>
  denomStates: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }) => Promise<ArrayOfDenomStateResponse>
  perpVaultPosition: ({
    accountId,
    action,
    userAddress,
  }: {
    accountId?: string
    action?: ActionKind
    userAddress: string
  }) => Promise<NullablePerpVaultPosition>
  deposit: ({
    accountId,
    userAddress,
  }: {
    accountId?: string
    userAddress: string
  }) => Promise<PerpVaultDeposit>
  unlocks: ({
    accountId,
    userAddress,
  }: {
    accountId?: string
    userAddress: string
  }) => Promise<ArrayOfPerpVaultUnlock>
  position: ({
    accountId,
    denom,
    orderSize,
  }: {
    accountId: string
    denom: string
    orderSize?: SignedUint
  }) => Promise<PositionResponse>
  positions: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string[][]
  }) => Promise<ArrayOfPositionResponse>
  positionsByAccount: ({
    accountId,
    action,
  }: {
    accountId: string
    action?: ActionKind
  }) => Promise<PositionsByAccountResponse>
  totalPnl: () => Promise<SignedDecimal>
  openingFee: ({ denom, size }: { denom: string; size: SignedUint }) => Promise<TradingFee>
  denomAccounting: ({ denom }: { denom: string }) => Promise<Accounting>
  totalAccounting: () => Promise<Accounting>
  denomRealizedPnlForAccount: ({
    accountId,
    denom,
  }: {
    accountId: string
    denom: string
  }) => Promise<PnlAmounts>
  positionFees: ({
    accountId,
    denom,
    newSize,
  }: {
    accountId: string
    denom: string
    newSize: SignedUint
  }) => Promise<PositionFeesResponse>
}
export class MarsPerpsQueryClient implements MarsPerpsReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.owner = this.owner.bind(this)
    this.config = this.config.bind(this)
    this.vault = this.vault.bind(this)
    this.denomState = this.denomState.bind(this)
    this.perpDenomState = this.perpDenomState.bind(this)
    this.perpDenomStates = this.perpDenomStates.bind(this)
    this.denomStates = this.denomStates.bind(this)
    this.perpVaultPosition = this.perpVaultPosition.bind(this)
    this.deposit = this.deposit.bind(this)
    this.unlocks = this.unlocks.bind(this)
    this.position = this.position.bind(this)
    this.positions = this.positions.bind(this)
    this.positionsByAccount = this.positionsByAccount.bind(this)
    this.totalPnl = this.totalPnl.bind(this)
    this.openingFee = this.openingFee.bind(this)
    this.denomAccounting = this.denomAccounting.bind(this)
    this.totalAccounting = this.totalAccounting.bind(this)
    this.denomRealizedPnlForAccount = this.denomRealizedPnlForAccount.bind(this)
    this.positionFees = this.positionFees.bind(this)
  }
  owner = async (): Promise<OwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {},
    })
  }
  config = async (): Promise<ConfigForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  vault = async ({ action }: { action?: ActionKind }): Promise<VaultResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault: {
        action,
      },
    })
  }
  denomState = async ({ denom }: { denom: string }): Promise<DenomStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom_state: {
        denom,
      },
    })
  }
  perpDenomState = async ({
    action,
    denom,
  }: {
    action: ActionKind
    denom: string
  }): Promise<PerpDenomState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      perp_denom_state: {
        action,
        denom,
      },
    })
  }
  perpDenomStates = async ({
    action,
    limit,
    startAfter,
  }: {
    action: ActionKind
    limit?: number
    startAfter?: string
  }): Promise<PaginationResponseForPerpDenomState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      perp_denom_states: {
        action,
        limit,
        start_after: startAfter,
      },
    })
  }
  denomStates = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }): Promise<ArrayOfDenomStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom_states: {
        limit,
        start_after: startAfter,
      },
    })
  }
  perpVaultPosition = async ({
    accountId,
    action,
    userAddress,
  }: {
    accountId?: string
    action?: ActionKind
    userAddress: string
  }): Promise<NullablePerpVaultPosition> => {
    return this.client.queryContractSmart(this.contractAddress, {
      perp_vault_position: {
        account_id: accountId,
        action,
        user_address: userAddress,
      },
    })
  }
  deposit = async ({
    accountId,
    userAddress,
  }: {
    accountId?: string
    userAddress: string
  }): Promise<PerpVaultDeposit> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deposit: {
        account_id: accountId,
        user_address: userAddress,
      },
    })
  }
  unlocks = async ({
    accountId,
    userAddress,
  }: {
    accountId?: string
    userAddress: string
  }): Promise<ArrayOfPerpVaultUnlock> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unlocks: {
        account_id: accountId,
        user_address: userAddress,
      },
    })
  }
  position = async ({
    accountId,
    denom,
    orderSize,
  }: {
    accountId: string
    denom: string
    orderSize?: SignedUint
  }): Promise<PositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      position: {
        account_id: accountId,
        denom,
        order_size: orderSize,
      },
    })
  }
  positions = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string[][]
  }): Promise<ArrayOfPositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      positions: {
        limit,
        start_after: startAfter,
      },
    })
  }
  positionsByAccount = async ({
    accountId,
    action,
  }: {
    accountId: string
    action?: ActionKind
  }): Promise<PositionsByAccountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      positions_by_account: {
        account_id: accountId,
        action,
      },
    })
  }
  totalPnl = async (): Promise<SignedDecimal> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_pnl: {},
    })
  }
  openingFee = async ({
    denom,
    size,
  }: {
    denom: string
    size: SignedUint
  }): Promise<TradingFee> => {
    return this.client.queryContractSmart(this.contractAddress, {
      opening_fee: {
        denom,
        size,
      },
    })
  }
  denomAccounting = async ({ denom }: { denom: string }): Promise<Accounting> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom_accounting: {
        denom,
      },
    })
  }
  totalAccounting = async (): Promise<Accounting> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_accounting: {},
    })
  }
  denomRealizedPnlForAccount = async ({
    accountId,
    denom,
  }: {
    accountId: string
    denom: string
  }): Promise<PnlAmounts> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom_realized_pnl_for_account: {
        account_id: accountId,
        denom,
      },
    })
  }
  positionFees = async ({
    accountId,
    denom,
    newSize,
  }: {
    accountId: string
    denom: string
    newSize: SignedUint
  }): Promise<PositionFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      position_fees: {
        account_id: accountId,
        denom,
        new_size: newSize,
      },
    })
  }
}
export interface MarsPerpsInterface extends MarsPerpsReadOnlyInterface {
  contractAddress: string
  sender: string
  updateOwner: (
    ownerUpdate: OwnerUpdate,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  deposit: (
    {
      accountId,
    }: {
      accountId?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  unlock: (
    {
      accountId,
      shares,
    }: {
      accountId?: string
      shares: Uint128
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  withdraw: (
    {
      accountId,
    }: {
      accountId?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  executePerpOrder: (
    {
      accountId,
      denom,
      reduceOnly,
      size,
    }: {
      accountId: string
      denom: string
      reduceOnly?: boolean
      size: SignedUint
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  closeAllPositions: (
    {
      accountId,
      action,
    }: {
      accountId: string
      action?: ActionKind
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  deleverage: (
    {
      accountId,
      denom,
    }: {
      accountId: string
      denom: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateParams: (
    {
      params,
    }: {
      params: PerpParams
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MarsPerpsClient extends MarsPerpsQueryClient implements MarsPerpsInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateOwner = this.updateOwner.bind(this)
    this.deposit = this.deposit.bind(this)
    this.unlock = this.unlock.bind(this)
    this.withdraw = this.withdraw.bind(this)
    this.executePerpOrder = this.executePerpOrder.bind(this)
    this.closeAllPositions = this.closeAllPositions.bind(this)
    this.deleverage = this.deleverage.bind(this)
    this.updateParams = this.updateParams.bind(this)
  }
  updateOwner = async (
    ownerUpdate: OwnerUpdate,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_owner: ownerUpdate,
      },
      fee,
      memo,
      _funds,
    )
  }
  deposit = async (
    {
      accountId,
    }: {
      accountId?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        deposit: {
          account_id: accountId,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  unlock = async (
    {
      accountId,
      shares,
    }: {
      accountId?: string
      shares: Uint128
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        unlock: {
          account_id: accountId,
          shares,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  withdraw = async (
    {
      accountId,
    }: {
      accountId?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw: {
          account_id: accountId,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  executePerpOrder = async (
    {
      accountId,
      denom,
      reduceOnly,
      size,
    }: {
      accountId: string
      denom: string
      reduceOnly?: boolean
      size: SignedUint
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        execute_perp_order: {
          account_id: accountId,
          denom,
          reduce_only: reduceOnly,
          size,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  closeAllPositions = async (
    {
      accountId,
      action,
    }: {
      accountId: string
      action?: ActionKind
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        close_all_positions: {
          account_id: accountId,
          action,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  deleverage = async (
    {
      accountId,
      denom,
    }: {
      accountId: string
      denom: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        deleverage: {
          account_id: accountId,
          denom,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateParams = async (
    {
      params,
    }: {
      params: PerpParams
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_params: {
          params,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
}
